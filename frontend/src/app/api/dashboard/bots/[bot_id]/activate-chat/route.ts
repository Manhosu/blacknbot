import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase'

/**
 * API para ativa√ß√£o de chat VIP (grupos ou canais)
 * 
 * Funcionalidades:
 * - Auto-detec√ß√£o do tipo de chat (grupo/supergrupo/canal)
 * - Auto-corre√ß√£o se o usu√°rio selecionou o tipo errado
 * - Valida√ß√£o de permiss√µes espec√≠ficas para cada tipo
 * - Mensagens de erro detalhadas e amig√°veis
 * 
 * Tipos suportados:
 * - Groups: grupos normais do Telegram
 * - Supergroups: grupos grandes (tratados como grupos)
 * - Channels: canais de transmiss√£o
 */
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ bot_id: string }> }
) {
  const { bot_id } = await params
  try {
    const authHeader = request.headers.get('authorization')
    if (!authHeader) {
      return NextResponse.json({ error: 'Token n√£o fornecido' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    const { chat_input, chat_id, chat_type } = await request.json()

    if (!chat_input || !chat_id || !chat_type) {
      return NextResponse.json({ error: 'Dados do chat n√£o fornecidos' }, { status: 400 })
    }

    if (!['group', 'channel'].includes(chat_type)) {
      return NextResponse.json({ error: 'Tipo de chat inv√°lido' }, { status: 400 })
    }

    // Verificar autentica√ß√£o com Supabase
    const supabase = createClient()
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Token inv√°lido' }, { status: 401 })
    }

    // Verificar se o bot pertence ao usu√°rio
    const { data: bot, error: botError } = await supabase
      .from('bots')
      .select('*')
      .eq('id', bot_id)
      .eq('user_id', user.id)
      .single()

    if (botError || !bot) {
      return NextResponse.json({ error: 'Bot n√£o encontrado' }, { status: 404 })
    }

    // Validar chat com API do Telegram
    try {
      console.log(`üîç Validando chat ${chat_id} como tipo: ${chat_type}`)
      console.log(`ü§ñ Bot token: ${bot.bot_token.substring(0, 20)}...`)
      
      // Para canais, primeiro tentar getChat direto
      // Para grupos, tamb√©m usar getChat (que funciona para ambos)
      const telegramResponse = await fetch(`https://api.telegram.org/bot${bot.bot_token}/getChat?chat_id=${chat_id}`)
      const telegramData = await telegramResponse.json()
      
      console.log(`üì° Resposta do Telegram:`, telegramData)
      
      // Se getChat falhar, tentar abordagem alternativa para grupos
      if (!telegramData.ok && chat_type === 'group') {
        console.log(`üîÑ getChat falhou para grupo, tentando getChatMember...`)
        
        // Para grupos, tentar getChatMember para ver se o bot est√° no grupo
        const memberResponse = await fetch(`https://api.telegram.org/bot${bot.bot_token}/getChatMember?chat_id=${chat_id}&user_id=${bot.bot_token.split(':')[0]}`)
        const memberData = await memberResponse.json()
        
        console.log(`üë§ Resposta getChatMember:`, memberData)
        
        if (memberData.ok) {
          // Se conseguiu verificar o membro, o grupo existe, mas pode n√£o ter permiss√£o para getChat
          console.log(`‚úÖ Bot est√° no grupo, mas getChat falhou - pode ser quest√£o de permiss√µes`)
          return NextResponse.json({ 
            error: `‚ùå Bot est√° no grupo mas n√£o tem permiss√µes suficientes. Promova o bot a administrador com todas as permiss√µes necess√°rias.`,
            telegram_error: telegramData.description,
            member_status: memberData.result?.status
          }, { status: 400 })
        }
      }
      
      if (!telegramData.ok) {
        let errorMessage = 'Chat n√£o encontrado ou bot n√£o tem acesso'
        
        // Mensagens espec√≠ficas baseadas no tipo esperado
        const expectedType = chat_type === 'channel' ? 'canal' : 'grupo'
        
        // Adicionar informa√ß√µes espec√≠ficas do erro
        if (telegramData.description) {
          if (telegramData.description.includes('chat not found')) {
            errorMessage = `‚ùå ${expectedType.charAt(0).toUpperCase() + expectedType.slice(1)} n√£o encontrado. 

üîç **Poss√≠veis causas:**
‚Ä¢ O ID/link est√° incorreto
‚Ä¢ O ${expectedType} n√£o existe
‚Ä¢ O bot n√£o foi adicionado ao ${expectedType}

üìã **Como corrigir:**
1. Verifique se o ID est√° correto (formato: -100XXXXXXXXXX)
2. Adicione o bot ao ${expectedType} primeiro
3. Promova o bot como administrador
4. Tente novamente

üí° **Dica:** Use o link do ${expectedType} (https://t.me/nome) em vez do ID se poss√≠vel.`
          } else if (telegramData.description.includes('bot is not a member')) {
            errorMessage = `‚ùå Bot n√£o √© membro deste ${expectedType}. Adicione o bot primeiro ao ${expectedType} e tente novamente.`
          } else if (telegramData.description.includes('Forbidden')) {
            errorMessage = `‚ùå Bot n√£o tem permiss√£o para acessar este ${expectedType}. Verifique as configura√ß√µes de privacidade do ${expectedType}.`
          } else if (telegramData.description.includes('Bad Request')) {
            errorMessage = `‚ùå ${expectedType.charAt(0).toUpperCase() + expectedType.slice(1)} inv√°lido ou inacess√≠vel. Verifique se o bot foi adicionado ao ${expectedType} como administrador.`
          } else {
            errorMessage = `‚ùå Erro do Telegram: ${telegramData.description}`
          }
        }
        
        console.log(`‚ùå Erro na valida√ß√£o do chat: ${telegramData.description}`)
        console.log(`üìã Tipo esperado: ${expectedType}, Chat ID: ${chat_id}`)
        
        // Adicionar informa√ß√µes de debug
        const debugInfo = {
          bot_username: bot.bot_username,
          chat_id: chat_id,
          expected_type: expectedType,
          telegram_error: telegramData.description,
          suggested_steps: [
            `1. Crie um ${expectedType} no Telegram`,
            `2. Adicione @${bot.bot_username} ao ${expectedType}`,
            `3. Promova o bot como administrador`,
            `4. Use o link (https://t.me/nome) em vez do ID`
          ]
        }
        
        return NextResponse.json({ 
          error: errorMessage,
          debug: debugInfo
        }, { status: 400 })
      }

      // Obter informa√ß√µes do chat
      const actualChatType = telegramData.result?.type
      const chatName = telegramData.result?.title || telegramData.result?.username || 'Chat sem nome'
      
      console.log(`üìã Chat encontrado - Tipo real: ${actualChatType}, Nome: ${chatName}`)

      // Verificar se √© um tipo de chat suportado
      if (!['group', 'supergroup', 'channel'].includes(actualChatType)) {
        return NextResponse.json({ 
          error: `‚ùå Tipo de chat n√£o suportado: ${actualChatType}. Apenas grupos, supergrupos e canais s√£o aceitos.` 
        }, { status: 400 })
      }

      // Auto-corrigir o tipo se necess√°rio
      let finalChatType = chat_type
      if (actualChatType === 'supergroup' || actualChatType === 'group') {
        finalChatType = 'group'
        if (chat_type === 'channel') {
          console.log(`üîÑ Auto-corrigindo: usu√°rio selecionou canal, mas √© um ${actualChatType}`)
        }
      } else if (actualChatType === 'channel') {
        finalChatType = 'channel'
        if (chat_type === 'group') {
          console.log(`üîÑ Auto-corrigindo: usu√°rio selecionou grupo, mas √© um canal`)
        }
      }

      console.log(`‚úÖ Tipo final determinado: ${finalChatType} (tipo real: ${actualChatType})`)

      // Verificar se o bot √© administrador (necess√°rio para grupos e canais)
      console.log(`üîê Verificando permiss√µes de administrador...`)
      
      const adminResponse = await fetch(`https://api.telegram.org/bot${bot.bot_token}/getChatAdministrators?chat_id=${chat_id}`)
      const adminData = await adminResponse.json()
      
      if (adminData.ok) {
        const botInfo = await fetch(`https://api.telegram.org/bot${bot.bot_token}/getMe`)
        const botInfoData = await botInfo.json()
        
        if (botInfoData.ok) {
          const botTelegramId = botInfoData.result.id
          const isAdmin = adminData.result.some((admin: any) => admin.user.id === botTelegramId)
          
          console.log(`ü§ñ Bot ID: ${botTelegramId}, √â admin: ${isAdmin}`)
          
          if (!isAdmin) {
            const chatTypeText = finalChatType === 'channel' ? 'canal' : 'grupo'
            return NextResponse.json({ 
              error: `‚ùå O bot precisa ser administrador do ${chatTypeText} para funcionar corretamente. Adicione o bot como administrador com permiss√µes para convidar usu√°rios.` 
            }, { status: 400 })
          }
          
          // Para canais, verificar se o bot tem permiss√£o para convidar usu√°rios
          if (finalChatType === 'channel') {
            const botAdmin = adminData.result.find((admin: any) => admin.user.id === botTelegramId)
            if (botAdmin && !botAdmin.can_invite_users) {
              return NextResponse.json({ 
                error: '‚ùå Bot precisa ter permiss√£o para convidar usu√°rios no canal. Verifique as configura√ß√µes de administrador.' 
              }, { status: 400 })
            }
            console.log(`‚úÖ Bot tem permiss√£o para convidar usu√°rios no canal`)
          }
          
          console.log(`‚úÖ Permiss√µes de administrador verificadas com sucesso`)
        }
      } else {
        // Para canais p√∫blicos, pode n√£o conseguir listar administradores
        if (finalChatType === 'channel') {
          console.log(`‚ö†Ô∏è N√£o foi poss√≠vel verificar administradores do canal (pode ser p√∫blico), continuando...`)
        } else {
          console.log(`‚ùå Erro ao verificar administradores: ${adminData.description}`)
          return NextResponse.json({ 
            error: '‚ùå N√£o foi poss√≠vel verificar permiss√µes do bot. Certifique-se de que o bot √© administrador.' 
          }, { status: 400 })
        }
      }

      // Atualizar o chat VIP diretamente no Supabase
      console.log(`üíæ Salvando no banco: chat_id=${chat_id}, tipo=${finalChatType}, nome=${chatName}`)
      
      const { data: updatedBot, error: updateError } = await supabase
        .from('bots')
        .update({ 
          vip_chat_id: chat_id,
          vip_type: finalChatType,
          vip_name: chatName
        })
        .eq('id', bot_id)
        .eq('user_id', user.id)
        .select()
        .single()

      if (updateError) {
        console.error('‚ùå Erro ao atualizar bot:', updateError)
        return NextResponse.json({ error: `‚ùå Erro ao ativar ${finalChatType === 'channel' ? 'canal' : 'grupo'}` }, { status: 500 })
      }
      
      console.log(`‚úÖ Bot atualizado com sucesso no banco de dados`)

      // Enviar mensagem de confirma√ß√£o no chat
      let messageSent = false
      try {
        const chatTypeText = finalChatType === 'channel' ? 'canal' : 'grupo'
        const chatIcon = finalChatType === 'channel' ? 'üì¢' : 'üì±'
        
        console.log(`üì§ Enviando mensagem de confirma√ß√£o no ${chatTypeText}...`)
        
        const messageText = `üéâ *Bot Ativado com Sucesso!*

‚úÖ O bot @${bot.bot_username} foi integrado a este ${chatIcon} ${chatTypeText} VIP!

üîπ *Funcionalidades ativas:*
‚Ä¢ Adi√ß√£o autom√°tica de usu√°rios pagantes
‚Ä¢ Remo√ß√£o autom√°tica quando pagamento expira
‚Ä¢ Sistema de vendas integrado

üí° *O que isso significa:*
Agora quando algu√©m comprar um plano do seu bot, ser√° automaticamente adicionado neste ${chatTypeText}!

üöÄ *Pr√≥ximos passos:*
1. Configure seus planos no painel
2. Divulgue seus produtos
3. Receba pagamentos automaticamente

---
_Powered by BlackinBot ü§ñ_`

        const sendMessageUrl = `https://api.telegram.org/bot${bot.bot_token}/sendMessage`
        const messageResponse = await fetch(sendMessageUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            chat_id: chat_id,
            text: messageText,
            parse_mode: 'Markdown'
          })
        })

        const messageData = await messageResponse.json()
        messageSent = messageData.ok
        
        if (messageSent) {
          console.log(`‚úÖ Mensagem de ativa√ß√£o enviada no ${chatTypeText} com sucesso`)
        } else {
          console.log(`‚ö†Ô∏è Erro ao enviar mensagem no ${chatTypeText}:`, messageData.description)
        }
        
      } catch (error) {
        console.error(`‚ùå Erro ao enviar mensagem no ${finalChatType === 'channel' ? 'canal' : 'grupo'}:`, error)
        // N√£o falhar a ativa√ß√£o se a mensagem n√£o for enviada
      }

      return NextResponse.json({ 
        message: `‚úÖ ${finalChatType === 'channel' ? 'üì¢ Canal' : 'üì± Grupo'} VIP ativado com sucesso!`,
        bot: updatedBot,
        messageSent: messageSent,
        chatName: chatName,
        actualType: finalChatType,
        detectedType: actualChatType
      })

    } catch (error) {
      console.error('‚ùå Erro ao validar chat:', error)
      return NextResponse.json({ 
        error: `‚ùå Erro ao validar acesso ao chat. Verifique se o link/ID est√° correto e tente novamente.` 
      }, { status: 400 })
    }

  } catch (error) {
    console.error('Erro na API de ativa√ß√£o de chat:', error)
    return NextResponse.json(
      { detail: 'Erro interno do servidor' }, 
      { status: 500 }
    )
  }
} 